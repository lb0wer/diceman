{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chosenChoice","newChoice","choices","alert","enterKeyListener","choiceElements","i","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","choice","value","style","color","push","react_default","a","createElement","key","className","err","return","_this2","type","placeholder","onChange","newChoiceChange","bind","onSubmit","addChoice","id","onClick","event","text","target","setState","_this3","document","getElementById","addEventListener","keyCode","preventDefault","num","Math","ceil","random","numChoices","role","concat","_this4","choiceList","paddingLeft","paddingRight","roll","reset","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8de86388.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      chosenChoice: null,\n      newChoice: null,\n      choices: [],\n      alert: false,\n    }\n  }\n\n  componentDidMount() {\n    this.enterKeyListener();\n  }\n\n  get numChoices() {\n    return this.state.choices.length;\n  }\n\n\n  choiceList() {\n    let choiceElements = [];\n    let i = 1;\n    for( let choice of this.state.choices) {\n      let style = i === this.state.chosenChoice ?\n        { color: 'green' } :\n        { color: 'black' };\n      choiceElements.push(\n        <li key={i} style={style} className=\"list-group-item\">{i}. {choice}</li>\n      );\n      i++;\n    }\n    return (\n      <ol className=\"list-group\">\n        {choiceElements}\n      </ol>\n    )\n  }\n\n  newChoice() {\n    return (\n        <div className=\"input-group mb-3\">\n          <input type=\"text\" className=\"form-control\" placeholder=\"New Option\"\n            value={this.state.newChoice} \n            onChange={this.newChoiceChange.bind(this)} \n            onSubmit={this.addChoice.bind(this)}\n            id='newChoice'\n          />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-secondary\" type=\"button\"\n              onClick={() => this.addChoice()}>\n              Add</button>\n          </div>\n        </div>\n    )\n  }\n\n  newChoiceChange(event) {\n    let text = event.target.value;\n    this.setState({ newChoice: text });\n  }\n\n  enterKeyListener() {\n    let input = document.getElementById(\"newChoice\");\n    input.addEventListener(\"keyup\", (event) => {\n      if (event.keyCode === 13) { // enter key\n        event.preventDefault();\n        this.addChoice();\n      }\n    });\n  }\n\n  addChoice() {\n    if(this.state.newChoice === null || this.state.newChoice === '') {\n      return;\n    }\n    let newChoice = this.state.newChoice;\n    let choices = this.state.choices;\n    choices.push(newChoice);\n    this.setState({\n      newChoice: '',\n      choices,\n    })\n  }\n\n  roll() {\n    let num = Math.ceil(Math.random() * this.numChoices );\n    this.setState({\n      chosenChoice: num,\n      alert: true,\n    })\n  }\n\n  alert() {\n    if(this.numChoices < 1) {\n      return <div className=\"alert alert-success\" role=\"alert\">\n        Please enter an option\n    </div>\n    }\n    return (\n      <div className=\"alert alert-success\" role=\"alert\">\n        {`The dice has chosen. You must take choice \n          ${this.state.chosenChoice}:\n          ${this.state.choices[this.state.chosenChoice -1]}\n        `}\n      </div>\n    )\n  }\n\n  reset() {\n    this.setState({\n      alert: false,\n      choices: [],\n      newChoice: '',\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>DiceLife</h1>\n          <br/>\n          <div className=\"container-fluid\">\n            {this.choiceList()}\n          </div>\n          <div className=\"container-fluid\">\n            {this.newChoice()}\n          </div>\n          <br/>\n          {this.state.alert && this.alert()}\n          <div style={{ paddingLeft: '2em', paddingRight: '2em' }}>\n            <button type=\"button\" className=\"btn btn-primary btn-lg\"\n              onClick={() => this.roll()}>\n              Roll\n            </button>\n          </div>\n          <br/>\n          <button type=\"button\" className=\"btn btn-secondary\"\n            onClick={() => this.reset()}>\n            Reset\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}